import { IAggsQuery, IAggs } from "./aggregates";
import { IAggsGroupedDailyQuery, IAggsGroupedDaily } from "./aggregatesGroupedDaily";
import { IDailyOpenCloseQuery, IDailyOpenClose } from "./dailyOpenClose";
import { IAggsPreviousCloseQuery, IAggsPreviousClose } from "./previousClose";
import { ILastQuote } from "./lastQuote";
import { ILastTrade } from "./lastTrade";
import { ISnapshotAllTickersQuery, ISnapshotTickers, ISnapshot } from "./snapshots";
import { IQuotes } from "./quotes";
import { ITradesQuotesQuery, ITrades } from "./trades";
export { IAggsQuery, IAggs } from "./aggregates";
export { IAggsGroupedDailyQuery, IAggsGroupedDaily, } from "./aggregatesGroupedDaily";
export { IDailyOpenCloseQuery, IDailyOpenClose } from "./dailyOpenClose";
export { IAggsPreviousCloseQuery, IAggsPreviousClose } from "./previousClose";
export { ILastQuote } from "./lastQuote";
export { ILastTrade } from "./lastTrade";
export { ISnapshotAllTickersQuery, ISnapshotTickers, ISnapshot, } from "./snapshots";
export { IQuotes } from "./quotes";
export { ITradesQuotesQuery, ITrades } from "./trades";
export interface IStocksClient {
    aggregates: (ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggsQuery) => Promise<IAggs>;
    aggregatesGroupedDaily: (date: string, query?: IAggsGroupedDailyQuery) => Promise<IAggsGroupedDaily>;
    dailyOpenClose: (symbol: string, date: string, query?: IDailyOpenCloseQuery) => Promise<IDailyOpenClose>;
    lastQuote: (symbol: string) => Promise<ILastQuote>;
    lastTrade: (symbol: string) => Promise<ILastTrade>;
    previousClose: (ticker: string, query?: IAggsPreviousCloseQuery) => Promise<IAggsPreviousClose>;
    quotes: (stockTicker: string, query?: ITradesQuotesQuery) => Promise<IQuotes>;
    snapshotAllTickers: (query?: ISnapshotAllTickersQuery) => Promise<ISnapshotTickers>;
    snapshotGainersLosers: (direction: "gainers" | "losers") => Promise<ISnapshotTickers>;
    snapshotTicker: (symbol: string) => Promise<ISnapshot>;
    trades: (stockTicker: string, query?: ITradesQuotesQuery) => Promise<ITrades>;
}
export declare const stocksClient: (apiKey: string, apiBase?: string) => IStocksClient;
export default stocksClient;
