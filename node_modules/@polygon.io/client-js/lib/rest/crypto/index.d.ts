import { IAggsQuery, IAggs } from "../stocks/aggregates";
import { IAggsGroupedDaily, IAggsGroupedDailyQuery } from "../stocks/aggregatesGroupedDaily";
import { IAggsPreviousCloseQuery, IAggsPreviousClose } from "../stocks/previousClose";
import { ITradesQuotesQuery } from "../stocks/trades";
import { ICryptoDailyOpenCloseQuery, ICryptoDailyOpenClose } from "./dailyOpenClose";
import { ICryptoTrade } from "./trades";
import { ICryptoLastTrade } from "./lastTrade";
import { ICryptoSnapshotAllTickersQuery, ICryptoSnapshotTickers, ICryptoSnapshot, ICryptoSnapshotFullBookL2 } from "./snapshots";
export { ICryptoDailyOpenCloseQuery, ICryptoDailyOpenClose, } from "./dailyOpenClose";
export { ICryptoTrade } from "./trades";
export { ICryptoLastTrade } from "./lastTrade";
export { ICryptoSnapshotAllTickersQuery, ICryptoSnapshotTickers, ICryptoSnapshot, ICryptoSnapshotFullBookL2, } from "./snapshots";
export interface ICryptoClient {
    aggregates: (ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggsQuery) => Promise<IAggs>;
    aggregatesGroupedDaily: (date: string, query?: IAggsGroupedDailyQuery) => Promise<IAggsGroupedDaily>;
    dailyOpenClose: (from: string, to: string, date: string, query?: ICryptoDailyOpenCloseQuery) => Promise<ICryptoDailyOpenClose>;
    trades: (cryptoTicker: string, query?: ITradesQuotesQuery) => Promise<ICryptoTrade>;
    lastTrade: (from: string, to: string) => Promise<ICryptoLastTrade>;
    previousClose: (symbol: string, query?: IAggsPreviousCloseQuery) => Promise<IAggsPreviousClose>;
    snapshotAllTickers: (query?: ICryptoSnapshotAllTickersQuery) => Promise<ICryptoSnapshotTickers>;
    snapshotGainersLosers: (direction: "gainers" | "losers") => Promise<ICryptoSnapshotTickers>;
    snapshotTicker: (symbol: string) => Promise<ICryptoSnapshot>;
    snapshotTickerFullBookL2: (symbol: string) => Promise<ICryptoSnapshotFullBookL2>;
}
export declare const cryptoClient: (apiKey: any, apiBase?: string) => ICryptoClient;
export default cryptoClient;
