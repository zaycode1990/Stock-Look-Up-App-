import { IConditionsQuery, IConditions } from "./conditions";
import { IExchangesQuery, IExchanges } from "./exchanges";
import { IMarketHoliday } from "./marketHolidays";
import { IMarketStatus } from "./marketStatus";
import { IOptionsContractQuery, IOptionsContract } from "./optionsContract";
import { IOptionsContractsQuery, IOptionsContracts } from "./optionsContracts";
import { IDividendsResults } from "./dividends";
import { IStockSplitsResults } from "./stockSplits";
import { IStockFinancialResults } from "./stockFinancials";
import { ITickerDetails } from "./tickerDetails";
import { ITickerNews, ITickerNewsQuery } from "./tickerNews";
import { ITickers, ITickersQuery } from "./tickers";
import { ITickerTypes, ITickerTypesQuery } from "./tickerTypes";
export { IConditions } from "./conditions";
export { IExchanges } from "./exchanges";
export { IMarketHoliday } from "./marketHolidays";
export { IMarketStatus } from "./marketStatus";
export { IDividendsResults } from "./dividends";
export { IStockSplitsResults } from "./stockSplits";
export { IStockFinancialResults } from "./stockFinancials";
export { ITickerDetails } from "./tickerDetails";
export { ITickerNews, ITickerNewsQuery } from "./tickerNews";
export { ITickers, ITickersQuery } from "./tickers";
export { ITickerTypes, ITickerTypesQuery } from "./tickerTypes";
export interface IReferenceClient {
    conditions: (query?: IConditionsQuery) => Promise<IConditions>;
    exchanges: (query?: IExchangesQuery) => Promise<IExchanges>;
    marketHolidays: () => Promise<IMarketHoliday[]>;
    marketStatus: () => Promise<IMarketStatus>;
    optionsContract: (optionsTicker: string, query?: IOptionsContractQuery) => Promise<IOptionsContract>;
    optionsContracts: (query?: IOptionsContractsQuery) => Promise<IOptionsContracts>;
    dividends: () => Promise<IDividendsResults>;
    stockSplits: () => Promise<IStockSplitsResults>;
    stockFinancials: () => Promise<IStockFinancialResults>;
    tickerDetails: (symbol: string) => Promise<ITickerDetails>;
    tickerNews: (query?: ITickerNewsQuery) => Promise<ITickerNews>;
    tickers: (query?: ITickersQuery) => Promise<ITickers>;
    tickerTypes: (query?: ITickerTypesQuery) => Promise<ITickerTypes>;
}
export declare const referenceClient: (apiKey: string, apiBase?: string) => IReferenceClient;
export default referenceClient;
